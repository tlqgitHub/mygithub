package com.poqop.document;

import java.io.File;

import android.app.Activity;
import android.app.Dialog;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.view.*;
import android.widget.FrameLayout;
import android.widget.Toast;
import com.poqop.document.events.CurrentPageListener;
import com.poqop.document.events.DecodingProgressListener;
import com.poqop.document.models.CurrentPageModel;
import com.poqop.document.models.DecodingProgressModel;
import com.poqop.document.models.ZoomModel;
import com.poqop.document.views.PageViewZoomControls;
import com.xyyh.whp.util.ExitApplication;
import com.xyyh.whp.util.Global;

/**
 * PDF文件显示页<br>
 * 
 * @author - 2011-12-15 吴鑫 <br>
 * 
 * @version - 2011-12-15 v1<br>
 * 
 * @par 版权所有<br>
 * 北京修远谊和科技发展有限公司<br>
 */
public abstract class BaseViewerActivity extends Activity implements DecodingProgressListener, CurrentPageListener
{
    private static final int MENU_EXIT = 0;//退出
    private static final int MENU_GOTO = 1;//跳转
    private static final int MENU_FULL_SCREEN = 2;//全屏
    private static final int DIALOG_GOTO = 0;//跳转
    private static final String DOCUMENT_VIEW_STATE_PREFERENCES = "DjvuDocumentViewState";
    private DecodeService decodeService;
    private DocumentView documentView;
    private ViewerPreferences viewerPreferences;
    private Toast pageNumberToast;//自定义Toast
    private CurrentPageModel currentPageModel;

    /**
     * onCreate()初始化调用
     * 
     * @param 吴鑫
     */
    @Override
    public void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        initDecodeService();
        final ZoomModel zoomModel = new ZoomModel();
        final DecodingProgressModel progressModel = new DecodingProgressModel();
        progressModel.addEventListener(this);
        currentPageModel = new CurrentPageModel();
        currentPageModel.addEventListener(this);
        documentView = new DocumentView(this, zoomModel, progressModel, currentPageModel);
        zoomModel.addEventListener(documentView);
        documentView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT, ViewGroup.LayoutParams.FILL_PARENT));
        decodeService.setContentResolver(getContentResolver());
        decodeService.setContainerView(documentView);
        documentView.setDecodeService(decodeService);
        decodeService.open(getIntent().getData());

        viewerPreferences = new ViewerPreferences(this);

        final FrameLayout frameLayout = createMainContainer();
        frameLayout.addView(documentView);
        frameLayout.addView(createZoomControls(zoomModel));
        setFullScreen();
        setContentView(frameLayout);

        final SharedPreferences sharedPreferences = getSharedPreferences(DOCUMENT_VIEW_STATE_PREFERENCES, 0);
        documentView.goToPage(sharedPreferences.getInt(getIntent().getData().toString(), 0));
        documentView.showDocument();

        viewerPreferences.addRecent(getIntent().getData());
    }

    /**
     * 解码进度
     */
    public void decodingProgressChanged(final int currentlyDecoding)
    {
        runOnUiThread(new Runnable()
        {
            public void run()
            {
                getWindow().setFeatureInt(Window.FEATURE_INDETERMINATE_PROGRESS, currentlyDecoding == 0 ? 10000 : currentlyDecoding);
            }
        });
    }

    /**
     * 当页面滑动过一页时Toast显示当前页数
     */
    public void currentPageChanged(int pageIndex)
    {
        final String pageText = (pageIndex + 1) + "/" + decodeService.getPageCount();
        if (pageNumberToast != null)
        {
            pageNumberToast.setText(pageText);
        }
        else
        {
            pageNumberToast = Toast.makeText(this, pageText, 150);
        }
        pageNumberToast.setGravity(Gravity.TOP | Gravity.LEFT,0,0);
        pageNumberToast.show();
        saveCurrentPage();
    }

    /**
     * 设置Title显示数据的值
     */
    private void setWindowTitle()
    {
        final String name = getIntent().getData().getLastPathSegment();
        String names = null;
        if(name.equals("p1.pdf")){
        	names = "固体类燃烧爆炸事故";
        }else if(name.equals("p2.pdf")){
        	names = "固体类泄露事故";
        }else if(name.equals("p3.pdf")){
        	names = "液体类燃烧爆炸事故";
        }else if(name.equals("p4.pdf")){
        	names = "液体类泄露事故";
        }else if(name.equals("p5.pdf")){
        	names = "气体类燃烧爆炸事故";
        }else if(name.equals("p6.pdf")){
        	names = "气体类泄露事故";
        }
        getWindow().setTitle(names);
    }

    /**
     * 显示Title
     */
    @Override
    protected void onPostCreate(Bundle savedInstanceState)
    {
        super.onPostCreate(savedInstanceState);
        setWindowTitle();
    }

    /**
     * 设置全屏
     */
    private void setFullScreen()
    {
        if (viewerPreferences.isFullScreen())
        {
            getWindow().requestFeature(Window.FEATURE_NO_TITLE);
            getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        }
        else
        {
            getWindow().requestFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
        }
    }

    /**
     * 创建缩放图片大小控制器
     * @param zoomModel
     * @return
     */
    private PageViewZoomControls createZoomControls(ZoomModel zoomModel)
    {
        final PageViewZoomControls controls = new PageViewZoomControls(this, zoomModel);
        controls.setGravity(Gravity.RIGHT | Gravity.BOTTOM);
        zoomModel.addEventListener(controls);
        return controls;
    }

    /**
     * 创建一个放置解码后图片的容器
     * @return
     */
    private FrameLayout createMainContainer()
    {
        return new FrameLayout(this);
    }

    /**
     * 初始化解码服务
     */
    private void initDecodeService()
    {
        if (decodeService == null)
        {
            decodeService = createDecodeService();
        }
    }

    protected abstract DecodeService createDecodeService();

    /**
     * 当Activity停止时
     */
    @Override
    protected void onStop()
    {
        super.onStop();
    }

    /**
     * Activity死亡时
     */
    @Override
    protected void onDestroy() {
        decodeService.recycle();
        decodeService = null;
        super.onDestroy();
    }

    /**
     * 保存当前页
     */
    private void saveCurrentPage()
    {
        final SharedPreferences sharedPreferences = getSharedPreferences(DOCUMENT_VIEW_STATE_PREFERENCES, 0);
        final SharedPreferences.Editor editor = sharedPreferences.edit();
        editor.putInt(getIntent().getData().toString(), documentView.getCurrentPage());
        editor.commit();
    }

    /**
     * 选项按钮
     */
    @Override
    public boolean onCreateOptionsMenu(Menu menu)
    {
        menu.add(0, MENU_EXIT, 0, "退出");
        menu.add(0, MENU_GOTO, 0, "跳转页面");
        final MenuItem menuItem = menu.add(0, MENU_FULL_SCREEN, 0, "Full screen").setCheckable(true).setChecked(viewerPreferences.isFullScreen());
        setFullScreenMenuItemText(menuItem);
        return true;
    }

    private void setFullScreenMenuItemText(MenuItem menuItem)
    {
        menuItem.setTitle("是否全屏" + (menuItem.isChecked() ? "（是）" : "（否）"));
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item)
    {
        switch (item.getItemId())
        {
            case MENU_EXIT:
                finish();
                return true;
            case MENU_GOTO:
                showDialog(DIALOG_GOTO);
                return true;
            case MENU_FULL_SCREEN:
                item.setChecked(!item.isChecked());
                setFullScreenMenuItemText(item);
                viewerPreferences.setFullScreen(item.isChecked());

                finish();
                startActivity(getIntent());
                return true;
        }
        return false;
    }

    /**
     * 跳转页面
     */
    @Override
    protected Dialog onCreateDialog(int id)
    {
        switch (id)
        {
            case DIALOG_GOTO:
                return new GoToPageDialog(this, documentView, decodeService);
        }
        return null;
    }
    
    /**
     * 监听HOME键
     */
	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (KeyEvent.KEYCODE_HOME == keyCode) {

			String path = Global.DATABASE_PATH + "/" + Global.DATABASE_FILENAME_JM;
			if(new File(path).exists()){
				new File(path).delete();	
			}
			ExitApplication.getInstance().exit();
			return false;

		}

		return super.onKeyDown(keyCode, event);
	}

	public void onAttachedToWindow() {
		this.getWindow().setType(WindowManager.LayoutParams.TYPE_KEYGUARD);
		super.onAttachedToWindow();
	}
}
